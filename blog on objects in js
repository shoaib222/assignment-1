Objects are complex and each object may contain a combination of primitive data-types as well as reference data-types.
An object is a reference data type. Variables that are assigned a reference value are given a reference or a pointer to 
That value. That reference or pointer points to the location in memory where the object is stored. 
The variables don’t actually store the value.
Otherway around, objects in JavaScript may be defined as an unordered collection of related data, of primitive or 
Reference types, in the form of “key: value” pairs. These keys can be variables or functions and are called properties 
and methods, respectively, in the context of an object.
An object can be created with figure brackets {} with an optional list of properties. A property is a “key: value” pair, 
where a key is the property name value can be anything.

Objects are important data types in javascript. Objects are different than primitive datatypes 
(i.e. number, string, boolean, etc.). Primitive data types contain one value but Objects can hold many values in form of 
Key: value pair. These keys can be variables or functions and are called properties and methods, respectively, 
in the context of an object.
Every object has some property associated with some value. These values can be accessed using these properties associated 
with them.
// example

var myCar = new Object();

myCar.make = 'Suzuki';

myCar.model = 'Altros';

myCar.year = 1978;

myCar.wheels = 2;

After creating myCar object, the value inside the object can be accessed using keys.

i.e.

myCar.year

Output: 1978

These values can be accessed using brackets notation also.

myCar.year

Output: 1978